{"ast":null,"code":"import _classCallCheck from \"/home/gagandeep/Documents/Projects/interview-corner/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/gagandeep/Documents/Projects/interview-corner/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/gagandeep/Documents/Projects/interview-corner/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/gagandeep/Documents/Projects/interview-corner/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/gagandeep/Documents/Projects/interview-corner/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/gagandeep/Documents/Projects/interview-corner/src/Components/UnivInterviews.js\";\nimport React, { Component } from 'react';\nimport { Route, NavLink } from 'react-router-dom';\nimport axios from 'axios';\nimport queryString from 'query-string';\nimport { List, Spin, Icon, Card, Avatar } from 'antd';\nvar interviews = null;\nvar filteredInterviews = null;\nvar collegeInterviews = null;\nvar selectedCollege = null;\nvar uniqueCompanies = null;\nvar gridStyle = {\n  textAlign: 'center',\n  cursor: 'pointer'\n};\n\nvar Interviews =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Interviews, _Component);\n\n  function Interviews() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Interviews);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Interviews)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      interviews: null,\n      filteredInterviews: null\n    };\n\n    _this.loadInterview = function (interview) {\n      console.log(interview);\n      var foundKey = null;\n\n      if (_this.state.interviews) {\n        Object.keys(_this.state.interviews).forEach(function (element) {\n          if (_this.state.interviews[element] === interview) {\n            foundKey = element;\n          }\n        });\n      }\n      /*if(interviews && filteredInterviews) {\r\n      \tfoundKey = arr.find(key => Object.entries(key[1]) === univarr);\r\n      \tconsole.log(foundKey);\r\n      }*/\n\n\n      _this.props.history.push({\n        pathname: '/interview-corner/univ-interview/',\n        search: 'id' + '=' + encodeURIComponent(foundKey)\n      });\n    };\n\n    _this.loadInterviews = function (company) {\n      _this.props.history.push({\n        search: 'college' + '=' + encodeURIComponent(selectedCollege) + '&' + company + '=' + encodeURIComponent(company)\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Interviews, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      axios.get('https://interview-corner-1de29.firebaseio.com/updated-interviews.json').then(function (response) {\n        return _this2.setState({\n          interviews: response.data\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var collegeFilter = null;\n\n      if (this.state.interviews) {\n        var values = queryString.parse(this.props.location.search);\n        selectedCollege = values.college;\n        collegeFilter = Object.values(this.state.interviews).filter(function (interview) {\n          return interview.college === selectedCollege;\n        });\n        var companies = null;\n\n        if (collegeFilter) {\n          companies = Object.values(collegeFilter).map(function (interview) {\n            return interview.company;\n          });\n        }\n\n        uniqueCompanies = companies.filter(function (value, index, self) {\n          return self.indexOf(value) === index;\n        });\n        console.log(uniqueCompanies);\n      }\n\n      var antIcon = React.createElement(Icon, {\n        type: \"loading\",\n        style: {\n          fontSize: 24\n        },\n        spin: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      });\n      var companyDisplay = React.createElement(Spin, {\n        indicator: antIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      });\n\n      if (uniqueCompanies) {\n        companyDisplay = uniqueCompanies.map(function (comp) {\n          return React.createElement(Card.Grid, {\n            style: gridStyle,\n            onClick: function onClick() {\n              return _this3.loadInterviews(comp);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          }, React.createElement(Avatar, {\n            style: {\n              color: '#f56a00',\n              backgroundColor: '#fde3cf'\n            },\n            size: 64,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88\n            },\n            __self: this\n          }, comp), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88\n            },\n            __self: this\n          }), comp);\n        });\n      }\n\n      collegeInterviews = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Loading...\");\n\n      if (this.state.interviews) {\n        var _values = queryString.parse(this.props.location.search);\n\n        selectedCollege = _values.college;\n        filteredInterviews = Object.values(this.state.interviews).filter(function (interview) {\n          return interview.college === selectedCollege;\n        });\n\n        if (filteredInterviews) {\n          collegeInterviews = Object.values(filteredInterviews).map(function (interview) {\n            return React.createElement(\"div\", {\n              key: interview,\n              onClick: function onClick() {\n                return _this3.loadInterview(interview);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 104\n              },\n              __self: this\n            }, React.createElement(NavLink, {\n              to: \"/interview-corner/univ-interview\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 104\n              },\n              __self: this\n            }, React.createElement(\"a\", {\n              href: \"#\",\n              className: \"list-group-item list-group-item-success notFull\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 105\n              },\n              __self: this\n            }, React.createElement(\"h4\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 106\n              },\n              __self: this\n            }, interview.name, \" Interview for \", interview.company))));\n            console.log('name', interview.name);\n          });\n        }\n      }\n\n      return React.createElement(\"div\", {\n        className: \"card-columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Card, {\n        title: selectedCollege,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, companyDisplay));\n    }\n  }]);\n\n  return Interviews;\n}(Component);\n\nexport default Interviews;","map":{"version":3,"sources":["/home/gagandeep/Documents/Projects/interview-corner/src/Components/UnivInterviews.js"],"names":["React","Component","Route","NavLink","axios","queryString","List","Spin","Icon","Card","Avatar","interviews","filteredInterviews","collegeInterviews","selectedCollege","uniqueCompanies","gridStyle","textAlign","cursor","Interviews","state","loadInterview","interview","console","log","foundKey","Object","keys","forEach","element","props","history","push","pathname","search","encodeURIComponent","loadInterviews","company","get","then","response","setState","data","collegeFilter","values","parse","location","college","filter","companies","map","value","index","self","indexOf","antIcon","fontSize","companyDisplay","comp","color","backgroundColor","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Route, NavLink } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport queryString from 'query-string';\r\nimport { List, Spin, Icon, Card, Avatar } from 'antd';\r\n\r\nlet interviews = null;\r\nlet  filteredInterviews = null;\r\nlet collegeInterviews = null;\r\nlet selectedCollege = null;\r\nlet uniqueCompanies = null;\r\n\r\nconst gridStyle = {\r\n  textAlign: 'center',\r\n  cursor: 'pointer'\r\n};\r\n\r\nclass Interviews extends Component {\r\n\r\n\tstate = {\r\n\t\tinterviews: null,\r\n\t\tfilteredInterviews: null,\r\n\t}\r\n\r\n\tloadInterview = (interview) => {\r\n\t\tconsole.log(interview);\r\n\t\tlet foundKey = null;\r\n\t\tif(this.state.interviews) {\r\n\t\t\tObject.keys(this.state.interviews).forEach((element) => {\r\n\t\t\t\tif(this.state.interviews[element] === interview) {\r\n\t\t\t\t\tfoundKey = element;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\t\r\n\t\t/*if(interviews && filteredInterviews) {\r\n\t\t\tfoundKey = arr.find(key => Object.entries(key[1]) === univarr);\r\n\t\t\tconsole.log(foundKey);\r\n\t\t}*/\r\n\t\tthis.props.history.push({\r\n\t\t\tpathname: '/interview-corner/univ-interview/',\r\n\t\t\tsearch: 'id' + '=' + encodeURIComponent(foundKey),\r\n\t\t});\r\n\t}\r\n\r\n\tloadInterviews = (company) => {\r\n\t\tthis.props.history.push({\r\n\t\t\tsearch: 'college' + '=' + encodeURIComponent(selectedCollege) + '&' + company + '=' + encodeURIComponent(company),\r\n\t\t})\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\taxios.get('https://interview-corner-1de29.firebaseio.com/updated-interviews.json').\r\n\t\tthen(response => \r\n\t\t\tthis.setState({ interviews : response.data}) );\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tlet collegeFilter = null;\r\n\t\tif(this.state.interviews) {\r\n\t\t\tconst values = queryString.parse(this.props.location.search);\r\n\t \t\tselectedCollege = values.college;\r\n\t \t\tcollegeFilter = Object.values(this.state.interviews).filter(\r\n\t\t\t\t(interview) => {\r\n\t\t\t\t\treturn interview.college === selectedCollege;\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\tlet companies = null;\r\n\t\t\tif(collegeFilter) {\r\n\t\t\t\tcompanies = Object.values(collegeFilter).map(\r\n\t\t\t\t\t(interview) => {\r\n\t\t\t\t\t\treturn interview.company;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tuniqueCompanies = companies.filter((value, index, self) => { \r\n    \t\t\treturn self.indexOf(value) === index;\r\n\t\t\t});\r\n\t\t\tconsole.log(uniqueCompanies);\r\n\t\t}\r\n\r\n\t\tconst antIcon = <Icon type=\"loading\" style={{ fontSize: 24 }} spin />;\r\n\r\n\t\tlet companyDisplay = <Spin indicator = {antIcon} />\r\n\t\tif(uniqueCompanies) {\r\n\t\t\tcompanyDisplay = uniqueCompanies.map(\r\n\t\t\t\t(comp) => {\r\n\t\t\t\t\treturn  <Card.Grid style={gridStyle} onClick = {() => this.loadInterviews(comp)}>\r\n\t\t\t\t\t\t\t\t<Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }} size = {64}>{comp}</Avatar><br/>{comp}\r\n\t\t\t\t\t\t\t</Card.Grid>\r\n\t\t\t\t});\r\n\t\t}\r\n\t\tcollegeInterviews = <div>Loading...</div>\r\n\t\tif(this.state.interviews) {\r\n\t\t\tconst values = queryString.parse(this.props.location.search);\r\n\t \t\tselectedCollege = values.college;\r\n\t \t\tfilteredInterviews = Object.values(this.state.interviews).filter(\r\n\t\t\t\t(interview) => {\r\n\t\t\t\t\treturn interview.college === selectedCollege;\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\tif(filteredInterviews) {\r\n\t\t\t\tcollegeInterviews = Object.values(filteredInterviews).map(\r\n\t\t\t\t\t(interview) => {\r\n\t\t\t\t\t\t\treturn ( <div key={interview} onClick={() => this.loadInterview(interview)}><NavLink to = \"/interview-corner/univ-interview\">\r\n\t\t\t\t\t\t\t\t<a href=\"#\" className=\"list-group-item list-group-item-success notFull\">\r\n\t\t\t\t\t\t\t\t<h4>{interview.name} Interview for {interview.company}</h4></a></NavLink></div>)\r\n\t\t\t\t\t\t\tconsole.log('name', interview.name); \r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t    return (\r\n\t    \t<div className = \"card-columns\">\r\n\t\t\t\t<Card title = {selectedCollege}>\r\n\t\t\t\t\t{companyDisplay}\r\n\t\t\t\t</Card>\r\n\t\t\t</div>\r\n    \t);\r\n\t}\r\n}\r\n\r\nexport default Interviews;"]},"metadata":{},"sourceType":"module"}